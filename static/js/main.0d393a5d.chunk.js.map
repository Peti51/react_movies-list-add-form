{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","onChange","onDisabledChange","touchedMovies","required","hasError","useState","Math","random","toString","slice","id","htmlFor","classNames","type","placeholder","event","target","onBlur","length","NewMovie","newMovie","setTouchedMovies","handleMovieAdd","setNewMovie","valueDelete","isButtonDisabled","count","setHasError","addMovieComponent","movieName","key","updatedObjectTitle","addTouchedComponent","componentName","isRequired","compKey","updatedObjectDescription","zeroValue","useEffect","update","forEach","property","onSubmit","preventDefault","hasAnError","field","prevTouchedMovies","disabled","onClick","App","obj","moviesFromServer","setMovies","setIsButtonDisabled","hasEmptyRequiredFields","Object","keys","some","trim","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0d393a5d.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { RequiredMovieFields } from '../../types/Movie';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  onChange: (newValue: string, inputName: string) => void,\n  onDisabledChange:\n  (newValue: boolean, inputName: string, isRequired: boolean) => void,\n  touchedMovies: RequiredMovieFields,\n  required?: boolean,\n  hasError: boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  onChange,\n  onDisabledChange,\n  touchedMovies,\n  required = false,\n  hasError,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value, name);\n  };\n\n  const handleBlur = () => {\n    if (value.length === 0) {\n      onDisabledChange(true, name, required);\n    } else {\n      onDisabledChange(false, name, required);\n    }\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger':\n            touchedMovies[name as keyof RequiredMovieFields]\n            && hasError\n            && name !== 'description',\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={handleInputChange}\n          onBlur={handleBlur}\n        />\n      </div>\n\n      {touchedMovies[name as keyof RequiredMovieFields]\n      && hasError\n      && name !== 'description' && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState, FormEvent, useEffect } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie, RequiredMovieFields } from '../../types/Movie';\n\ninterface Props {\n  newMovie: Movie,\n  touchedMovies: RequiredMovieFields,\n  setNewMovie: (newValue: Movie) => void,\n  setTouchedMovies:\n  (newValue: RequiredMovieFields | ((prevTouchedMovies: RequiredMovieFields)\n  => RequiredMovieFields)) => void,\n  valueDelete: () => void,\n  handleMovieAdd: () => void,\n  isButtonDisabled: boolean,\n}\n\nexport const NewMovie: React.FC<Props> = ({\n  newMovie,\n  touchedMovies,\n  setTouchedMovies,\n  handleMovieAdd,\n  setNewMovie,\n  valueDelete,\n  isButtonDisabled,\n}) => {\n  const [count] = useState(0);\n  const [hasError, setHasError] = useState(false);\n  const {\n    title,\n    description,\n    imgUrl,\n    imdbUrl,\n    imdbId,\n  } = newMovie;\n\n  type MovieKey = keyof RequiredMovieFields;\n\n  type TouchedKeys = {\n    [key in MovieKey]: boolean;\n  };\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    const requiredFields: MovieKey[] = ['title', 'imgUrl', 'imdbUrl', 'imdbId'];\n    let hasAnError = true;\n\n    requiredFields.forEach((field) => {\n      if (!newMovie[field as keyof RequiredMovieFields]) {\n        setTouchedMovies((prevTouchedMovies) => ({\n          ...prevTouchedMovies,\n          [field]: false,\n        }));\n        hasAnError = false;\n      }\n    });\n\n    if (!hasAnError) {\n      handleMovieAdd();\n      valueDelete();\n    }\n  };\n\n  const addMovieComponent = (event: string, movieName: string) => {\n    const key = movieName;\n    const updatedObjectTitle = { ...newMovie, [key]: event };\n\n    setNewMovie(updatedObjectTitle);\n  };\n\n  const addTouchedComponent = (\n    event: boolean,\n    componentName: string,\n    isRequired: boolean,\n  ) => {\n    const compKey = componentName;\n    const updatedObjectDescription = { ...touchedMovies, [compKey]: event };\n    const zeroValue = newMovie[compKey as keyof RequiredMovieFields];\n\n    setTouchedMovies(updatedObjectDescription);\n\n    if (!zeroValue.length\n      && isRequired) {\n      setHasError(true);\n    }\n  };\n\n  useEffect(() => {\n    const properties: MovieKey[]\n     = ['title', 'imgUrl', 'imdbUrl', 'imdbId'];\n    const update: TouchedKeys = { ...touchedMovies };\n\n    properties.forEach((property) => {\n      if (newMovie[property].length > 0) {\n        update[property] = false;\n      }\n    });\n\n    setTouchedMovies(update);\n  }, [newMovie]);\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      {}\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        required\n        value={title}\n        onChange={(event, movieName) => {\n          addMovieComponent(event, movieName);\n        }}\n        onDisabledChange={(event, componentName, isRequired) => {\n          addTouchedComponent(event, componentName, isRequired);\n        }}\n        touchedMovies={touchedMovies}\n        hasError={hasError}\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(event, movieName) => {\n          addMovieComponent(event, movieName);\n        }}\n        onDisabledChange={(event, componentName, isRequired) => {\n          addTouchedComponent(event, componentName, isRequired);\n        }}\n        touchedMovies={touchedMovies}\n        hasError={hasError}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        required\n        value={imgUrl}\n        onChange={(event, movieName) => {\n          addMovieComponent(event, movieName);\n        }}\n        onDisabledChange={(event, componentName, isRequired) => {\n          addTouchedComponent(event, componentName, isRequired);\n        }}\n        touchedMovies={touchedMovies}\n        hasError={hasError}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        required\n        value={imdbUrl}\n        onChange={(event, movieName) => {\n          addMovieComponent(event, movieName);\n        }}\n        onDisabledChange={(event, componentName, isRequired) => {\n          addTouchedComponent(event, componentName, isRequired);\n        }}\n        touchedMovies={touchedMovies}\n        hasError={hasError}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        required\n        value={imdbId}\n        onChange={(event, movieName) => {\n          addMovieComponent(event, movieName);\n        }}\n        onDisabledChange={(event, componentName, isRequired) => {\n          addTouchedComponent(event, componentName, isRequired);\n        }}\n        touchedMovies={touchedMovies}\n        hasError={hasError}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            disabled={isButtonDisabled}\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            onClick={() => {\n              handleMovieAdd();\n              valueDelete();\n            }}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useEffect, useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport { RequiredMovieFields } from './types/Movie';\nimport moviesFromServer from './api/movies.json';\n\nfunction checkEmptyInputs(obj: {\n  [key: string]: string }): boolean {\n  return Object.keys(obj).some((key) => obj[key].trim().length === 0\n   && key !== 'description');\n}\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [touchedMovies, setTouchedMovies] = useState<RequiredMovieFields>(\n    {\n      title: false,\n      imgUrl: false,\n      imdbUrl: false,\n      imdbId: false,\n    },\n  );\n  const [newMovie, setNewMovie] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n  const {\n    title,\n    imgUrl,\n    imdbUrl,\n    imdbId,\n  } = newMovie;\n\n  const hasEmptyRequiredFields = checkEmptyInputs(newMovie);\n\n  const handleMovieAdd = () => {\n    if (hasEmptyRequiredFields) {\n      setIsButtonDisabled(true);\n    } else if (!hasEmptyRequiredFields) {\n      setMovies([...movies, newMovie]);\n    }\n  };\n\n  const valueDelete = () => {\n    setNewMovie({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  };\n\n  useEffect(() => {\n    if (!hasEmptyRequiredFields) {\n      setIsButtonDisabled(false);\n    } else {\n      setIsButtonDisabled(true);\n    }\n\n    if (touchedMovies.title\n      && touchedMovies.imgUrl\n      && touchedMovies.imdbId\n      && touchedMovies.imdbUrl) {\n      setIsButtonDisabled(true);\n    }\n  }, [title,\n    imgUrl,\n    imdbUrl,\n    imdbId,\n    touchedMovies.title,\n    touchedMovies.imgUrl,\n    touchedMovies.imdbId,\n    touchedMovies.imdbUrl]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          newMovie={newMovie}\n          setNewMovie={setNewMovie}\n          isButtonDisabled={isButtonDisabled}\n          touchedMovies={touchedMovies}\n          setTouchedMovies={setTouchedMovies}\n          handleMovieAdd={handleMovieAdd}\n          valueDelete={valueDelete}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}