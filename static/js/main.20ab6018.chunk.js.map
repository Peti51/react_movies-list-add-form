{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","onChange","onDisabledChange","touchedMovies","required","useState","Math","random","toString","slice","id","hasError","setHasError","useEffect","htmlFor","classNames","type","placeholder","event","target","onBlur","length","NewMovie","newMovie","setTouchedMovies","addOn","setNewMovie","isButtonDisabled","count","onSubmit","preventDefault","updatedObjectTitle","updatedObjectDescription","updatedObjectImgUrl","updatedObjectimgUrl","updatedObjectImdUrl","updatedObjectimdbUrl","updatedObjectImdbId","updatedObjectimdbId","disabled","onClick","App","moviesFromServer","setMovies","setIsButtonDisabled","ReactDOM","render","document","getElementById"],"mappings":"ivEAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,sBAAKC,UAAU,OAAO,UAAQ,aAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,EAAMK,aAIrC,sBAAKJ,UAAU,UAAf,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAf,0BA5BkC,ECE7BC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,OAFE,KAFsB,E,gBCQpC,IAAMC,EAA6B,SAAC,GAQpC,IAPLC,EAOI,EAPJA,KACAC,EAMI,EANJA,MAMI,IALJC,aAKI,MALIF,EAKJ,EAJJG,EAII,EAJJA,SACAC,EAGI,EAHJA,iBACAC,EAEI,EAFJA,cACAC,EACI,EADJA,SAEA,EAAaC,oBAAS,2BAASP,EAAT,YAZfQ,KAAKC,SAASC,WAAWC,MAAM,GAYhB,IAAfC,EAAP,oBACA,EAAgCL,oBAAS,GAAzC,mBAAOM,EAAP,KAAiBC,EAAjB,KAyCA,OA3BAC,qBAAU,WACR,OAAQf,GACN,IAAK,QAeL,QACEc,EAAYT,EAAcd,OAASe,IAAaL,SAblD,IAAK,cACHa,EAAYT,EAAcb,aAAec,IAAaL,GACtD,MACF,IAAK,SACHa,EAAYT,EAAchB,QAAUiB,IAAaL,GACjD,MACF,IAAK,UACHa,EAAYT,EAAcX,SAAWY,IAAaL,GAClD,MACF,IAAK,SACHa,EAAYT,EAAcP,QAAUQ,IAAaL,GAKtD,GAAE,CAACI,EAAcd,MAChBc,EAAcb,YACda,EAAchB,OACdgB,EAAcX,QACdW,EAAcP,OACdG,IAGA,sBAAKd,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQ6B,QAASJ,EAAlC,SACGV,IAGH,qBAAKf,UAAU,UAAf,SACE,uBACEyB,GAAIA,EACJ,0BAAkBZ,GAClBb,UAAW8B,IAAW,QAAS,CAC7B,YAAaJ,IAEfK,KAAK,OACLC,YAAW,gBAAWjB,GACtBD,MAAOA,EACPE,SAvDkB,SAACiB,GACzBjB,EAASiB,EAAMC,OAAOpB,MACvB,EAsDOqB,OAAQ,WAnDO,IAAjBrB,EAAMsB,OACRnB,GAAiB,GAEjBA,GAAiB,EAkDZ,MAIJS,GACC,mBAAG1B,UAAU,iBAAb,mBAAkCe,EAAlC,oBAIP,ECpFYsB,EAA4B,SAAC,GAOnC,IANLC,EAMI,EANJA,SACApB,EAKI,EALJA,cACAqB,EAII,EAJJA,iBACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,YACAC,EACI,EADJA,iBAEA,EAAgBtB,mBAAS,GAAlBuB,EAAP,oBAMA,OACE,uBACE3C,UAAU,WAEV4C,SARiB,SAACX,GACpBA,EAAMY,gBACP,EAGC,UAKE,oBAAI7C,UAAU,QAAd,yBAIA,cAAC,EAAD,CACEa,KAAK,QACLE,MAAM,QACND,MAAOwB,EAASlC,MAChBe,UAAQ,EACRH,SAAU,SAACiB,GACT,IAAMa,EAAkB,2BAAQR,GAAR,IAAkBlC,MAAO6B,IAEjDQ,EAAYK,EACb,EACD7B,iBAAkB,SAACgB,GACjB,IAAMa,EAAkB,2BAChB5B,GADgB,IACDd,MAAO6B,IAE9BM,EAAiBO,EAClB,EACD5B,cAAeA,IAGjB,cAAC,EAAD,CACEL,KAAK,cACLE,MAAM,cACNI,UAAQ,EACRL,MAAOwB,EAASjC,YAChBW,SAAU,SAACiB,GACT,IAAMc,EAAwB,2BAAQT,GAAR,IAAkBjC,YAAa4B,IAE7DQ,EAAYM,EACb,EACD9B,iBAAkB,SAACgB,GACjB,IAAMc,EAAwB,2BACtB7B,GADsB,IACPb,YAAa4B,IAEpCM,EAAiBQ,EAClB,EACD7B,cAAeA,IAGjB,cAAC,EAAD,CACEL,KAAK,SACLE,MAAM,YACND,MAAOwB,EAASpC,OAChBiB,UAAQ,EACRH,SAAU,SAACiB,GACT,IAAMe,EAAmB,2BAAQV,GAAR,IAAkBpC,OAAQ+B,IAEnDQ,EAAYO,EACb,EACD/B,iBAAkB,SAACgB,GACjB,IAAMgB,EAAmB,2BACjB/B,GADiB,IACFhB,OAAQ+B,IAE/BM,EAAiBU,EAClB,EACD/B,cAAeA,IAGjB,cAAC,EAAD,CACEL,KAAK,UACLE,MAAM,WACND,MAAOwB,EAAS/B,QAChBY,UAAQ,EACRH,SAAU,SAACiB,GACT,IAAMiB,EAAmB,2BAAQZ,GAAR,IAAkB/B,QAAS0B,IAEpDQ,EAAYS,EACb,EACDjC,iBAAkB,SAACgB,GACjB,IAAMkB,EAAoB,2BAClBjC,GADkB,IACHX,QAAS0B,IAEhCM,EAAiBY,EAClB,EACDjC,cAAeA,IAGjB,cAAC,EAAD,CACEL,KAAK,SACLE,MAAM,UACND,MAAOwB,EAAS3B,OAChBQ,UAAQ,EACRH,SAAU,SAACiB,GACT,IAAMmB,EAAmB,2BAAQd,GAAR,IAAkB3B,OAAQsB,IAEnDQ,EAAYW,EACb,EACDnC,iBAAkB,SAACgB,GACjB,IAAMoB,EAAmB,2BACjBnC,GADiB,IACFP,OAAQsB,IAE/BM,EAAiBc,EAClB,EACDnC,cAAeA,IAGjB,qBAAKlB,UAAU,mBAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBACEsD,SAAUZ,EACVX,KAAK,SACL,UAAQ,gBACR/B,UAAU,iBACVuD,QAASf,EALX,uBAxGCG,EAqHV,E,QC5IYa,EAAM,WACjB,MAA4BpC,mBAASqC,GAArC,mBAAOhD,EAAP,KAAeiD,EAAf,KACA,EAAgDtC,oBAAS,GAAzD,mBAAOsB,EAAP,KAAyBiB,EAAzB,KACA,EAA0CvC,mBACxC,CACEhB,OAAO,EACPC,aAAa,EACbH,QAAQ,EACRK,SAAS,EACTI,QAAQ,IANZ,mBAAOO,EAAP,KAAsBqB,EAAtB,KASA,EAAgCnB,mBAAS,CACvChB,MAAO,GACPC,YAAa,GACbH,OAAQ,GACRK,QAAS,GACTI,OAAQ,KALV,mBAAO2B,EAAP,KAAiBG,EAAjB,KAmDA,OAbAb,qBAAU,WACsB,IAA1BU,EAASlC,MAAMgC,QACkB,IAAhCE,EAASjC,YAAY+B,QACM,IAA3BE,EAASpC,OAAOkC,QACY,IAA5BE,EAAS/B,QAAQ6B,QACU,IAA3BE,EAAS3B,OAAOyB,QACnBuB,GAAoB,EAEvB,GAAE,CAACrB,EAASlC,MACXkC,EAASpC,OACToC,EAAS/B,QACT+B,EAAS3B,SAGT,sBAAKX,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQA,MAEtB,qBAAKT,UAAU,UAAf,SACE,cAAC,EAAD,CACEsC,SAAUA,EACVG,YAAaA,EACbC,iBAAkBA,EAClBxB,cAAeA,EACfqB,iBAAkBA,EAClBC,MAvDM,WAGZ,GAFAkB,EAAU,GAAD,mBAAKjD,GAAL,CAAa6B,KAEQ,IAA1BA,EAASlC,MAAMgC,QACkB,IAAhCE,EAASjC,YAAY+B,QACM,IAA3BE,EAASpC,OAAOkC,QACY,IAA5BE,EAAS/B,QAAQ6B,QACU,IAA3BE,EAAS3B,OAAOyB,OAAc,CACjCuB,GAAoB,GAEpB,IAAMP,EAAmB,2BACpBd,GADoB,IAEvBlC,OAAO,EACPC,aAAa,EACbM,QAAQ,EACRT,QAAQ,EACRK,SAAS,IAGXgC,EAAiBa,EAClB,MACCM,EAAU,GAAD,mBAAKjD,GAAL,CAAa6B,KACtBA,EAASlC,MAAQ,GACjBkC,EAASjC,YAAc,GACvBiC,EAASpC,OAAS,GAClBoC,EAAS/B,QAAU,GACnB+B,EAAS3B,OAAS,EAErB,QAgCF,ECnFDiD,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.20ab6018.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState, useEffect } from 'react';\nimport { IsMovie } from '../../types/Movie';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  onChange: (newValue: string) => void,\n  onDisabledChange: (newValue: boolean) => void,\n  touchedMovies: IsMovie,\n  required: boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  onChange,\n  onDisabledChange,\n  touchedMovies,\n  required,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [hasError, setHasError] = useState(false);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value);\n  };\n\n  const blurring = () => {\n    if (value.length === 0) {\n      onDisabledChange(true);\n    } else {\n      onDisabledChange(false);\n    }\n  };\n\n  useEffect(() => {\n    switch (name) {\n      case 'title':\n        setHasError(touchedMovies.title && required && !value);\n        break;\n      case 'description':\n        setHasError(touchedMovies.description && required && !value);\n        break;\n      case 'imgUrl':\n        setHasError(touchedMovies.imgUrl && required && !value);\n        break;\n      case 'imdbUrl':\n        setHasError(touchedMovies.imdbUrl && required && !value);\n        break;\n      case 'imdbId':\n        setHasError(touchedMovies.imdbId && required && !value);\n        break;\n      default:\n        setHasError(touchedMovies.title && required && !value);\n    }\n  }, [touchedMovies.title,\n    touchedMovies.description,\n    touchedMovies.imgUrl,\n    touchedMovies.imdbUrl,\n    touchedMovies.imdbId,\n    value]);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={handleInputChange}\n          onBlur={() => {\n            blurring();\n          }}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState, FormEvent } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie, IsMovie } from '../../types/Movie';\n\ninterface Props {\n  newMovie: Movie,\n  touchedMovies: IsMovie,\n  setNewMovie: (newValue: Movie) => void,\n  setTouchedMovies: (newValue: IsMovie) => void,\n  addOn: () => void,\n  isButtonDisabled: boolean,\n}\n\nexport const NewMovie: React.FC<Props> = ({\n  newMovie,\n  touchedMovies,\n  setTouchedMovies,\n  addOn,\n  setNewMovie,\n  isButtonDisabled,\n}) => {\n  const [count] = useState(0);\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      {}\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={newMovie.title}\n        required\n        onChange={(event) => {\n          const updatedObjectTitle = { ...newMovie, title: event };\n\n          setNewMovie(updatedObjectTitle);\n        }}\n        onDisabledChange={(event) => {\n          const updatedObjectTitle\n           = { ...touchedMovies, title: event };\n\n          setTouchedMovies(updatedObjectTitle);\n        }}\n        touchedMovies={touchedMovies}\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        required\n        value={newMovie.description}\n        onChange={(event) => {\n          const updatedObjectDescription = { ...newMovie, description: event };\n\n          setNewMovie(updatedObjectDescription);\n        }}\n        onDisabledChange={(event) => {\n          const updatedObjectDescription\n           = { ...touchedMovies, description: event };\n\n          setTouchedMovies(updatedObjectDescription);\n        }}\n        touchedMovies={touchedMovies}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={newMovie.imgUrl}\n        required\n        onChange={(event) => {\n          const updatedObjectImgUrl = { ...newMovie, imgUrl: event };\n\n          setNewMovie(updatedObjectImgUrl);\n        }}\n        onDisabledChange={(event) => {\n          const updatedObjectimgUrl\n           = { ...touchedMovies, imgUrl: event };\n\n          setTouchedMovies(updatedObjectimgUrl);\n        }}\n        touchedMovies={touchedMovies}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={newMovie.imdbUrl}\n        required\n        onChange={(event) => {\n          const updatedObjectImdUrl = { ...newMovie, imdbUrl: event };\n\n          setNewMovie(updatedObjectImdUrl);\n        }}\n        onDisabledChange={(event) => {\n          const updatedObjectimdbUrl\n           = { ...touchedMovies, imdbUrl: event };\n\n          setTouchedMovies(updatedObjectimdbUrl);\n        }}\n        touchedMovies={touchedMovies}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={newMovie.imdbId}\n        required\n        onChange={(event) => {\n          const updatedObjectImdbId = { ...newMovie, imdbId: event };\n\n          setNewMovie(updatedObjectImdbId);\n        }}\n        onDisabledChange={(event) => {\n          const updatedObjectimdbId\n           = { ...touchedMovies, imdbId: event };\n\n          setTouchedMovies(updatedObjectimdbId);\n        }}\n        touchedMovies={touchedMovies}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            disabled={isButtonDisabled}\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            onClick={addOn}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useEffect, useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport { IsMovie } from './types/Movie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [touchedMovies, setTouchedMovies] = useState<IsMovie>(\n    {\n      title: false,\n      description: false,\n      imgUrl: false,\n      imdbUrl: false,\n      imdbId: false,\n    },\n  );\n  const [newMovie, setNewMovie] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const addOn = () => {\n    setMovies([...movies, newMovie]);\n\n    if (newMovie.title.length === 0\n      && newMovie.description.length === 0\n      && newMovie.imgUrl.length === 0\n      && newMovie.imdbUrl.length === 0\n      && newMovie.imdbId.length === 0) {\n      setIsButtonDisabled(true);\n\n      const updatedObjectImdbId = {\n        ...newMovie,\n        title: true,\n        description: true,\n        imdbId: true,\n        imgUrl: true,\n        imdbUrl: true,\n      };\n\n      setTouchedMovies(updatedObjectImdbId);\n    } else {\n      setMovies([...movies, newMovie]);\n      newMovie.title = '';\n      newMovie.description = '';\n      newMovie.imgUrl = '';\n      newMovie.imdbUrl = '';\n      newMovie.imdbId = '';\n    }\n  };\n\n  useEffect(() => {\n    if (newMovie.title.length !== 0\n      && newMovie.description.length !== 0\n      && newMovie.imgUrl.length !== 0\n      && newMovie.imdbUrl.length !== 0\n      && newMovie.imdbId.length !== 0) {\n      setIsButtonDisabled(false);\n    }\n  }, [newMovie.title,\n    newMovie.imgUrl,\n    newMovie.imdbUrl,\n    newMovie.imdbId]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          newMovie={newMovie}\n          setNewMovie={setNewMovie}\n          isButtonDisabled={isButtonDisabled}\n          touchedMovies={touchedMovies}\n          setTouchedMovies={setTouchedMovies}\n          addOn={addOn}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}